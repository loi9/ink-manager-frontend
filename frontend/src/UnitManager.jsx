// ==============================
// üìÅ File: frontend/src/UnitManager.jsx
// üì¶ M·ª•c ƒë√≠ch: Qu·∫£n l√Ω c√°c h·ªôp m·ª±c (Ink Units)
// ==============================

import React, { useState, useEffect } from 'react';
import axios from './api';   // ‚úÖ D√πng axios client chung (ƒë√£ c·∫•u h√¨nh s·∫µn baseURL)

// ==============================
// üß© Component ch√≠nh
// ==============================
function UnitManager() {
    const [units, setUnits] = useState([]);          // danh s√°ch c√°c h·ªôp m·ª±c
    const [inkCatalogue, setInkCatalogue] = useState([]);  // danh m·ª•c lo·∫°i m·ª±c
    const [printers, setPrinters] = useState([]);    // danh s√°ch m√°y in
    const [loading, setLoading] = useState(true);    // tr·∫°ng th√°i t·∫£i
    const [editingUnit, setEditingUnit] = useState(null);  // h·ªôp m·ª±c ƒëang ch·ªânh s·ª≠a

    const [newUnit, setNewUnit] = useState({
        unit_id: '',
        custom_name: '',
        ink_code: '',
        status: 'IN_STOCK',
        current_printer_id: null,
    });

    // ==============================
    // üîÑ T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu
    // ==============================
    const fetchData = async () => {
        try {
            const [unitsRes, inksRes, printersRes] = await Promise.all([
                axios.get('/inkunits'),
                axios.get('/inks'),
                axios.get('/printers'),
            ]);

            setUnits(unitsRes.data);
            setInkCatalogue(inksRes.data);
            setPrinters(printersRes.data);
            setLoading(false);
        } catch (error) {
            console.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu:", error);
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchData();
    }, []);

    // ==============================
    // üü© (M·ªöI TH√äM) ‚Äî H√†m t√¨m t√™n m√°y in t·ª´ ID
    // ==============================
    const getPrinterNameById = (printerId) => {
        if (!printerId) return null;
        const printer = printers.find(p => p.printer_id === printerId);
        // N·∫øu c√≥ t√™n m√°y in th√¨ tr·∫£ v·ªÅ, n·∫øu kh√¥ng c√≥ th√¨ tr·∫£ v·ªÅ m√£
        return printer ? printer.printer_name || printer.printer_id : printerId;
    };

    // ==============================
    // ‚úèÔ∏è H√†m x·ª≠ l√Ω thay ƒë·ªïi input form
    // ==============================
    const handleChange = (e) => {
        setNewUnit({ ...newUnit, [e.target.name]: e.target.value });
    };

    const handleEditChange = (e) => {
        const { name, value } = e.target;

        // N·∫øu ch·ªçn tr·∫°ng th√°i ‚ÄúT·ªìn kho‚Äù ho·∫∑c ‚Äúƒê√£ h·ªßy‚Äù, t·ª± ƒë·ªông x√≥a li√™n k·∫øt m√°y in
        if (name === 'status' && (value === 'IN_STOCK' || value === 'DISPOSED')) {
            setEditingUnit({ ...editingUnit, [name]: value, current_printer_id: null });
        } else {
            setEditingUnit({ ...editingUnit, [name]: value });
        }
    };

    // ==============================
    // ‚ûï T·∫°o h·ªôp m·ª±c m·ªõi
    // ==============================
    const handleCreateUnit = async (e) => {
        e.preventDefault();
        if (!newUnit.unit_id || !newUnit.ink_code) {
            alert("‚ö†Ô∏è M√£ Unit ID v√† M√£ Lo·∫°i M·ª±c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
            return;
        }
        try {
            await axios.post('/inkunits', newUnit);
            alert('‚úÖ T·∫°o h·ªôp m·ª±c m·ªõi th√†nh c√¥ng!');
            setNewUnit({ unit_id: '', custom_name: '', ink_code: '', status: 'IN_STOCK', current_printer_id: null });
            fetchData();
        } catch (error) {
            alert(`‚ùå T·∫°o h·ªôp m·ª±c th·∫•t b·∫°i: ${error.response?.data?.error || error.message}`);
        }
    };

    // ==============================
    // ‚ùå X√≥a h·ªôp m·ª±c
    // ==============================
    const handleDeleteUnit = async (unitId) => {
        if (!confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën X√ìA vƒ©nh vi·ªÖn Unit ${unitId} v√† T·∫§T C·∫¢ logs li√™n quan?`)) return;
        try {
            await axios.delete(`/inkunits/${unitId}`);
            alert('üóëÔ∏è ƒê√£ x√≥a h·ªôp m·ª±c th√†nh c√¥ng!');
            fetchData();
        } catch (error) {
            alert(`‚ùå X√≥a th·∫•t b·∫°i: ${error.response?.data?.error || error.message}`);
        }
    };

    // ==============================
    // üìù C·∫≠p nh·∫≠t h·ªôp m·ª±c
    // ==============================
    const handleUpdateUnit = async (e) => {
        e.preventDefault();
        try {
            const updatePayload = {
                custom_name: editingUnit.custom_name,
                status: editingUnit.status,
                current_printer_id: (editingUnit.status === 'IN_STOCK' || editingUnit.status === 'DISPOSED')
                    ? null
                    : editingUnit.current_printer_id,
            };

            await axios.put(`/inkunits/${editingUnit.unit_id}`, updatePayload);
            alert('‚úÖ C·∫≠p nh·∫≠t h·ªôp m·ª±c th√†nh c√¥ng!');
            setEditingUnit(null);
            fetchData();
        } catch (error) {
            alert(`‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i: ${error.response?.data?.error || error.message}`);
        }
    };

    // ==============================
    // üí¨ Hi·ªÉn th·ªã khi ƒëang t·∫£i
    // ==============================
    if (loading) return <div className="content-loading">ƒêang t·∫£i d·ªØ li·ªáu...</div>;

    // ==============================
    // üß± Giao di·ªán ch√≠nh
    // ==============================
    return (
        <div>
            {/* --- Form t·∫°o h·ªôp m·ª±c m·ªõi --- */}
            <h2>T·∫°o H·ªôp M·ª±c Ri√™ng Bi·ªát M·ªõi</h2>
            <div className="log-form-container">
                <form onSubmit={handleCreateUnit} className="log-form">
                    <label>M√£ Unit ID (Duy nh·∫•t):</label>
                    <input type="text" name="unit_id" value={newUnit.unit_id} onChange={handleChange} required />

                    <label>T√™n T√πy Ch·ªânh (T√πy ch·ªçn):</label>
                    <input type="text" name="custom_name" value={newUnit.custom_name} onChange={handleChange} />

                    <label>M√£ Lo·∫°i M·ª±c:</label>
                    <select name="ink_code" value={newUnit.ink_code} onChange={handleChange} required>
                        <option value="">-- Ch·ªçn Lo·∫°i M·ª±c --</option>
                        {inkCatalogue.map(ink => (
                            <option key={ink.ink_code} value={ink.ink_code}>
                                {ink.ink_name} ({ink.ink_code})
                            </option>
                        ))}
                    </select>

                    <label>Tr·∫°ng th√°i Ban ƒë·∫ßu:</label>
                    <select name="status" value={newUnit.status} onChange={handleChange}>
                        <option value="IN_STOCK">T·ªìn Kho (IN_STOCK)</option>
                        <option value="INSTALLED">ƒê√£ L·∫Øp (INSTALLED)</option>
                        <option value="DISPOSED">ƒê√£ H·ªßy (DISPOSED)</option>
                    </select>

                    <button type="submit">T·∫°o H·ªôp M·ª±c</button>
                </form>
            </div>

            <hr />
            {/* --- B·∫£ng danh s√°ch h·ªôp m·ª±c --- */}
            <h2>Danh S√°ch H·ªôp M·ª±c ƒêang Ho·∫°t ƒê·ªông ({units.length})</h2>

            <table className="dashboard-table">
                <thead>
                    <tr>
                        <th>M√£ Unit</th>
                        <th>T√™n T√πy Ch·ªânh</th>
                        <th>Lo·∫°i M·ª±c</th>
                        <th>Tr·∫°ng th√°i</th>
                        <th>M√°y ƒëang l·∫Øp</th>
                        <th>H√†nh ƒë·ªông</th>
                    </tr>
                </thead>

                <tbody>
                    {units.map((unit) => (
                        <tr key={unit.unit_id}>
                            {editingUnit && editingUnit.unit_id === unit.unit_id ? (
                                // ==============================
                                // üîß Ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
                                // ==============================
                                <>
                                    <td>{unit.unit_id}</td>
                                    <td>
                                        <input
                                            type="text"
                                            name="custom_name"
                                            value={editingUnit.custom_name}
                                            onChange={handleEditChange}
                                        />
                                    </td>
                                    <td>{unit.ink_code?.ink_name || unit.ink_code}</td>
                                    <td>
                                        <select name="status" value={editingUnit.status} onChange={handleEditChange}>
                                            <option value="IN_STOCK">T·ªìn Kho</option>
                                            <option value="INSTALLED">ƒê√£ L·∫Øp</option>
                                            <option value="DISPOSED">ƒê√£ H·ªßy</option>
                                        </select>
                                    </td>
                                    <td>
                                        <select
                                            name="current_printer_id"
                                            value={editingUnit.current_printer_id || ''}
                                            onChange={handleEditChange}
                                            disabled={editingUnit.status !== 'INSTALLED'}
                                        >
                                            <option value="">KHO</option>

                                            {/* üü© (ƒê√É S·ª¨A) ‚Äî Hi·ªÉn th·ªã T√äN m√°y in */}
                                            {printers.map(p => (
                                                <option key={p.printer_id} value={p.printer_id}>
                                                    {p.printer_name || p.printer_id}
                                                </option>
                                            ))}
                                        </select>
                                    </td>
                                    <td>
                                        <button onClick={handleUpdateUnit} className="save-btn">L∆∞u</button>
                                        <button onClick={() => setEditingUnit(null)} className="cancel-btn">H·ªßy</button>
                                    </td>
                                </>
                            ) : (
                                // ==============================
                                // üëÅÔ∏è Ch·∫ø ƒë·ªô xem th∆∞·ªùng
                                // ==============================
                                <>
                                    <td>{unit.unit_id}</td>
                                    <td>{unit.custom_name || 'N/A'}</td>
                                    <td>{unit.ink_code?.ink_name || unit.ink_code}</td>
                                    <td className={unit.status === 'IN_STOCK' ? 'low-stock' : ''}>{unit.status}</td>

                                    {/* üü© (ƒê√É S·ª¨A) ‚Äî Hi·ªÉn th·ªã t√™n m√°y in thay v√¨ ch·ªâ ID */}
                                    <td>
                                        {unit.current_printer_id
                                            ? `${getPrinterNameById(unit.current_printer_id)} (${unit.current_printer_id})`
                                            : 'KHO'}
                                    </td>

                                    <td>
                                        <button onClick={() => setEditingUnit(unit)} className="edit-btn">S·ª≠a</button>
                                        <button onClick={() => handleDeleteUnit(unit.unit_id)} className="delete-btn">X√≥a</button>
                                    </td>
                                </>
                            )}
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
}

export default UnitManager;
